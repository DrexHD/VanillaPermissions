import org.jetbrains.changelog.Changelog

plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
    id 'org.jetbrains.changelog' version '2.+'
}

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

repositories {
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation(fabricApi.module("fabric-command-api-v2", project.fabric_version))

    // Mod dependencies
    modImplementation include("me.lucko:fabric-permissions-api:${project.fabric_permissions_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

java {
    withSourcesJar()
    def javaVersion = stonecutter.eval(project.version, ">=1.20.5") ?
            JavaVersion.VERSION_21 : JavaVersion.VERSION_17

    targetCompatibility = javaVersion
    sourceCompatibility = javaVersion
}

loom {
    accessWidenerPath.set(file("../../src/main/resources/vanilla-permissions.accesswidener"))

    runConfigs.all {
        ideConfigGenerated(true)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
    }
}

publishMods {
    file = remapJar.archiveFile
    type = STABLE
    changelog = fetchChangelog()

    displayName = "VanillaPermissions ${version.get()}"
    modLoaders.add("fabric")
    modLoaders.add("quilt")


    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = "686569"
        minecraftVersions.add(project.curseforge_minecraft_version)
    }
    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "fdZkP5Bb"
        minecraftVersions.add(project.minecraft_version)
    }
    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/dryrun")
        commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
    }
}

private String fetchChangelog() {
    def log = getChangelog.changelog.get()
    if (log.has(project.mod_version)) {
        return log.renderItem(
                log.get(project.mod_version).withHeader(false),
                Changelog.OutputType.MARKDOWN
        )
    } else {
        return ""
    }
}
